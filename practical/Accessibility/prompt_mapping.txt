You are an expert at reconciling Accessibility findings from multiple automated tools (axe-core, Lighthouse, and Pa11y). I will provide you with JSON objects (or dictionaries) containing issues identified by each tool. Your task is:

Identify Duplicate Issues Across Tools
Lighthouse issues are keyed by help URLs.
axe-core issues often provide a helpUrl (which we can treat similarly to Lighthouse’s URL).
Pa11y issues mostly contain the WCAG ID instead of a URL.
HTML_CodeSniffer (within Pa11y’s outputs) references htmlcs_id strings.

Combine These Into a Single JSON
When the same underlying WCAG or HTML_CodeSniffer rule appears under multiple tools, merge them into a single entry.
Keep track of each tool’s data, such as the message/title, impact level, code or ID, plus any relevant nodes or descriptions.
If two issues clearly refer to the same underlying violation (e.g., share the same htmlcs_id subset or the same helpUrl), unify them.
If a URL cannot directly be matched with an ID, create an entry without the unmatched field. 

Very Important: Every Issue URL or Issue ID which Axe-Core, Lighthouse or Pa11y found, has to be used and has to be added to the list.

Store the following in each merged object if applicable:
name (or “group”): A human-readable category or label describing the accessibility issue (e.g., “Color Contrast,” “Alt Text,” “Form Labeling,” etc.).
htmlcs_id: the HTML_CodeSniffer ID(s).
axe_url: the axe-core or Lighthouse help URL(s).
impact: the highest or otherwise most appropriate severity (low, moderate, high) from among the combined issues (or keep separate if your logic requires).

Iterative / Incremental Updates
This mapping dictionary must be able to grow. Each time we analyze a new HTML or new set of results from the three tools, we want to integrate new issues and enhance existing entries if we find more details.

Final Output Format
Produce a JSON array of merged objects, each containing at least the keys name, htmlcs_id, axe_url, impact.
Return only the final JSON array (and any sub-objects) as your output, without extra commentary.
If you do not find a matching rule or ID for certain new issues, add them as new entries in the final JSON structure. Otherwise, merge them into the relevant existing entry.

Example of the final merged structure (simplified):

[
  {
    "name": "Color Contrast",
    "htmlcs_id": [
      "Principle1.Guideline1_4.1_4_3.G18",
      "Principle1.Guideline1_4.1_4_3.G18.Fail",
      "Principle1.Guideline1_4.1_4_3.G145",
      "Principle1.Guideline1_4.1_4_3.G145.Fail",
      "Principle1.Guideline1_4.1_4_6.G17",
      "Principle1.Guideline1_4.1_4_6.G18"
    ],
    "axe_url": [
      "https://dequeuniversity.com/rules/axe/4.10/color-contrast",
      "https://dequeuniversity.com/rules/axe/4.10/color-contrast-enhanced"
    ],
    "impact": "moderate"
  },
  ...
]
Follow these rules carefully and produce the combined JSON for each set of new inputs I provide. If multiple tools refer to the same violation, merge them into a single object. Otherwise, create a new object in the final JSON output. Make sure each entry in the array reflects all relevant details from any tools that identified that same issue, and always include the “name” (group) property in each entry.